schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"Defines the available forms of abatement for a Condition"
union Abatement = AgeAbatement | DateTimeAbatement | PeriodAbatement | RangeAbatement | StringAbatement

"Defines the available forms of author for an Annotation"
union Author = ReferenceAuthor | StringAuthor

"Defines the available forms of onset for a Condition"
union Onset = AgeOnset | DateTimeOnset | PeriodOnset | RangeOnset | StringOnset

"A physical address"
type Address {
  "Name of city, town, etc."
  city: String
  "Street name, number, direction & P.O. Box etc."
  line: [String!]!
  "Postal code for area"
  postalCode: String
  "Subunit of country"
  state: String
  "Purpose of address - home | work | temp | old | billing"
  use: String
}

"An age quantity"
type Age {
  "Coded form of the unit"
  code: String
  "< | <= | >= | > - how to understand the value"
  comparator: String
  "System that defines coded unit form"
  system: String
  "Unit representation"
  unit: String
  "Numerical value (with implicit precision)"
  value: Float
}

"Age representation of the Abatement"
type AgeAbatement {
  "Age of abatement"
  value: Age!
}

"Age representation of the Onset"
type AgeOnset {
  "Age of onset"
  value: Age!
}

"A text note which also contains information about who made the statement and when."
type Annotation {
  "Individual responsible for the annotation"
  author: Author
  "The annotation - text content (as markdown)"
  text: String!
  "When the annotation was made"
  time: String
}

"An appointment in a clinical setting"
type Appointment {
  "The style of appointment or patient that has been booked in the slot (not service type)"
  appointmentType: CodeableConcept
  "The internal identifier for this appointment"
  id: String!
  "List of appointment identifiers"
  identifier: [Identifier!]!
  "Participants on this appointment"
  participants: [Participant!]!
  "The specific service that is to be performed during this appointment"
  serviceType: [CodeableConcept!]!
  "When appointment is to take place. An instant in time in the format YYYY-MM-DDThh:mm:ss.sss+zz:zz (e.g. 2015-02-07T13:28:17.239+02:00 or 2017-01-01T00:00:00Z). The time SHALL specified at least to the second and SHALL include a time zone."
  start: String
  "Current status of the meeting"
  status: String!
}

"A CodeableConcept represents a value that is usually supplied by providing a reference to one or more terminologies or ontologies but may also be defined by the provision of text."
type CodeableConcept {
  "Code defined by a terminology system"
  coding: [Coding!]!
  "Plain text representation of the concept"
  text: String
}

"A Coding is a representation of a defined concept using a symbol from a defined \"code system\""
type Coding {
  "Symbol in syntax defined by the system"
  code: String
  "Representation defined by the system"
  display: String
  "Identity of the terminology system"
  system: String
  "If this coding was chosen directly by the user"
  userSelected: Boolean
  "Version of the system"
  version: String
}

"A patient condition"
type Condition {
  "When in resolution/remission"
  abatement: Abatement
  "Person who asserts this condition"
  asserter: Reference
  "Anatomical location, if relevant"
  bodySite: [CodeableConcept!]!
  "The category of this condition (e.g. probelm-list-item, encounter-diagnosis, etc)"
  category: [CodeableConcept!]!
  "The clinical status of this condition (e.g. active, relapse, recurrence, etc)"
  clinicalStatus: CodeableConcept
  "Identification of the condition, problem or diagnosis"
  code: CodeableConcept
  "Encounter created as part of"
  encounter: Reference
  "Supporting evidence"
  evidence: [Evidence!]!
  "The internal identifier for this condition"
  id: String
  "List of external identifiers for this condition"
  identifier: [Identifier!]!
  "Additional information about the Condition"
  note: [Annotation!]!
  "Estimated or actual date, date-time, or age"
  onset: Onset
  "Date record was first recorded"
  recordedDate: String
  "Who recorded the condition"
  recorder: Reference
  "Subjective severity of condition"
  severity: CodeableConcept
  "Stage/grade, usually assessed formally"
  stage: [Stage!]!
  "Who has the condition?"
  subject: Reference!
  "The verification status of this condition (e.g. confirmed, differential, unconfirmed, etc"
  verificationStatus: CodeableConcept
}

"Detail about an available form of contact with a patient"
type ContactPoint {
  "The system of contact (e.g. phone, email, fax, etc"
  system: String
  "The purpose of this contact (e.g. home, work, mobile, etc)"
  use: String
  "The actual contact value"
  value: String
}

"Date-time representation of the Abatement"
type DateTimeAbatement {
  "The string representation of the date/time. The format is YYYY, YYYY-MM, YYYY-MM-DD or YYYY-MM-DDThh:mm:ss+zz:zz"
  value: String!
}

"Date-time representation of the Onset"
type DateTimeOnset {
  "The string representation of the date/time. The format is YYYY, YYYY-MM, YYYY-MM-DD or YYYY-MM-DDThh:mm:ss+zz:zz"
  value: String!
}

"Supporting evidence"
type Evidence {
  "Manifestation/symptom"
  code: [CodeableConcept!]!
  "Supporting information found elsewhere"
  detail: [Reference!]!
}

"The name of a person"
type HumanName {
  "Family name (often called 'Surname')"
  family: String
  "Given named (not always 'first'). Given names appear in the order they should be presented."
  given: [String!]!
  "Defines the use of this name (e.g. official, nickname, maiden, etc)"
  use: String
}

"An identifier intended for computation"
type Identifier {
  "The namespace for the identifier"
  system: String
  "The value."
  value: String!
}

type Mutation {
  "Sends a message and returns the current status."
  sendMessage(message: MessageInput!, tenantId: String!): String!
  "Takes in note from product and processes it for downstream services"
  sendNote(noteInput: NoteInput!, tenantId: String!): String!
}

"A participant on an appointment"
type Participant {
  "The reference to the participant object"
  actor: Reference!
}

"A patient"
type Patient {
  "Physical address(es)"
  address: [Address!]!
  "Date of birth in ISO 8601 format (YYYY-MM-DD)"
  birthDate: String
  "Gender (for administrative uses)"
  gender: String
  "The internal identifier for this patient"
  id: String
  "List of patient known identifiers (e.g. MRN, EPI, etc.)"
  identifier: [Identifier!]!
  "The name(s) of the patient"
  name: [HumanName!]!
  "The available means of telecommunication"
  telecom: [ContactPoint!]!
}

"Time range defined by start and end date/time"
type Period {
  "End time with inclusive boundary, if not ongoing"
  end: String
  "Starting time with inclusive boundary"
  start: String
}

"Period representation of the Abatement"
type PeriodAbatement {
  "Period of abatement"
  value: Period!
}

"Period representation of the Onset"
type PeriodOnset {
  "Period of onset"
  value: Period!
}

type Query {
  "Finds appointments for a given MRN and date range. Requires User Auth."
  appointmentsByMRNAndDate(endDate: String!, mrn: String!, startDate: String!, tenantId: String!): [Appointment!]! @deprecated(reason : "This query is deprecated., replace with appointmentsByPatientAndDate")
  "Finds appointments for a given patient UDP ID and date range. Requires User Auth."
  appointmentsByPatientAndDate(endDate: String!, patientFhirId: String!, startDate: String!, tenantId: String!): [Appointment!]!
  "Finds active patient conditions for a given patient and category. Only conditions registered within the category will be returned. Requires User Auth."
  conditionsByPatientAndCategory(conditionCategoryCode: ConditionCategoryCode!, patientFhirId: String!, tenantId: String!): [Condition!]!
  "Finds patient(s) that exactly match on family name, given name, and birthdate (YYYY-mm-dd format)."
  patientsByNameAndDOB(birthdate: String!, family: String!, given: String!, tenantId: String!): [Patient!]!
}

"Set of values bounded by low and high"
type Range {
  "High limit"
  high: SimpleQuantity
  "Low limit"
  low: SimpleQuantity
}

"Range representation of the Abatement"
type RangeAbatement {
  "Range of abatement"
  value: Range!
}

"Range representation of the Onset"
type RangeOnset {
  "Range of onset"
  value: Range!
}

"A reference to another FHIR object"
type Reference {
  "Text alternative for the resource"
  display: String
  "Unique Reference"
  id: String
  "Logical Reference"
  identifier: Identifier
  "Literal reference, Relative, internal or absolute url"
  reference: String
  "Type of object the reference refers to"
  type: String
}

"Reference representation of the Author"
type ReferenceAuthor {
  "Reference to the author"
  value: Reference!
}

"A simple quantity"
type SimpleQuantity {
  "Coded form of the unit"
  code: String
  "System that defines coded unit form"
  system: String
  "Unit representation"
  unit: String
  "Numerical value (with implicit precision)"
  value: Float
}

"Stage/grade, usually assessed formally"
type Stage {
  "Formal record of assessment"
  assessment: [Reference!]!
  "Simple summary (disease specific)"
  summary: CodeableConcept
  "Kind of staging"
  type: CodeableConcept
}

"String representation of the Abatement"
type StringAbatement {
  "The abatement"
  value: String!
}

"String representation of the Author"
type StringAuthor {
  "The author"
  value: String!
}

"String representation of the Onset"
type StringOnset {
  "The onset"
  value: String!
}

enum ConditionCategoryCode {
  PROBLEM_LIST_ITEM
}

enum PatientIdType {
  FHIR
  MRN @deprecated(reason : "Deprecated ID Type")
}

"A message that should be submitted to one or more recipients"
input MessageInput {
  "The patient for whom the message is being sent"
  patient: MessagePatientInput!
  "The List of recipients of the message"
  recipients: [MessageRecipientInput!]!
  "The text of the message that should be sent"
  text: String!
}

"The patient for whom the message is being sent"
input MessagePatientInput {
  "The MRN of the patient"
  mrn: String!
}

"The recipient of a message"
input MessageRecipientInput {
  "The FHIR ID of the message recipient"
  fhirId: String!
}

"A message that contains note information from product for HL7v2 downstream writebacks"
input NoteInput {
  "Timestamp of when note was recorded, in yyyymmddhhmmss format"
  datetime: String!
  "The text of the note that should be sent"
  noteText: String!
  "The identifier of the patient that the note is for"
  patientId: String!
  "The patient identifier type"
  patientIdType: PatientIdType!
  "The FHIR ID of the practitioner authoring the note"
  practitionerFhirId: String!
}
